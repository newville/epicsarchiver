##
##  Installation instructions for the EpicsArchiver.

To install the epicsarchiver package, use

   pip install epicsarchiver

This fetches and installs all the Python packages needed, and install the
`pvarch` program (typically to '/usr/local/bin/pvarch') that is used control
the data collection.

## Mysql setup:

You will need to configure mysql (or mariadb) to be running. For most linux machines,
this can be done with `systemctl enable mysqld` and `systemctl start mysqld`, though
some systems may distinguish between `mysql` and `mariadb`.

You will also need to create a mysql account and give that account permission
to create and write to the databases needed for the archiver.  This will typically
look like (for mysql account 'archiver' with password 'lets_archive_some_pvs'):

   mysql> create user 'archiver'@'localhost' identified by 'lets_archive_some_pvs';
   mysql> grant all privileges on *.* to 'archiver'@'localhost';
   mysql> flush privileges;

You may need to consult with your system administrator for permission to do this.

## Configuration:

You can configure several settings for epicsarchiver with a simple configuration file.
The current configuration for your system can be viewed with

  ~> pvarch show_config

which will print out something like this:

    #pvarch configuration:
    #No variable PVARCH_CONFIG found
    archive_report_period = '300'
    cache_alert_period = '30'
    cache_db = 'pvarch_master'
    cache_report_period = '300'
    dat_format = '%s_%.5d'
    dat_prefix = 'pvdata'
    host = 'localhost'
    logdir = '/var/log/pvarch'
    mail_from = 'pvarchiver@aps.anl.gov'
    mail_server = 'localhost'
    password = 'change_this_password!'
    pv_deadtime_double = '5'
    pv_deadtime_enum = '1'
    server = 'mysql'
    sql_dump = '/usr/bin/mysqldump'
    user = 'epics'
    web_baseurl = 'https://localhost/'
    web_url = 'pvarch'
    web_dir = '/var/web/pvarch'


You can modify this configuration by creating file (using the same TOML syntax) and pointing
the environmental variable PVARCH_CONFIG to that file.  For example, you might have

    ~> export PVARCH_CONFIG='/var/log/pvarch/pvarch_congig.toml'
    ~> cat /var/log/pvarch/pvarch_config.toml
    # configuration file for Epics Archiver
    user = 'archiver'
    password = 'lets_archive_some_pvs'
    host = 'beamlineX.aps.anl.gov'
    baseurl = 'https://beamlineX.aps.anl.gov/pvarch'
    logdir = '/var/log/pvarch'
    ##########

so that the `pvarch` command and epicsarchiver library can correctly connect
to your database.  More information on the rest of the settings in this
configuration file is described in the documents.

## Create initial databases:

With a configuration to match your mysql setup (which you can verify with
`pvarch show_config`), you can create SQL commands to create and initialize
databases need for the archiving, with

    ~> pvarch sql_init pvarch_init.sql

This will generate the file `pvarch_init.sql` which you can then use to create
the databases with (assuming the mysql user name is `archiver`):

    ~> mysql -p -uarchiver < pvarch_init.sql

with this command you will be verifying that this account can create mysql
databases.


## Epics connections and adding PVs to be archived:

You will want to add some PVs to your archiver.  To do this, use


    ~> pvarch add_pv  MYPV1.VAL MYPV2.VAL ...

or put PV names into a file (perhaps with multiple related PVs on a single
line, separated by commas and/or spaces) and use:

    ~> pvarch add_pvfile mypvlist.txt

Of course, the archiving process needs to be able to connect to the PVs
listed.  Depending on your network environment or, you may need to set
EPICS_ADDR_LIST to connect to all of the PVs that you wish to archive.


## Start the data collection

As described in more detail in the documentation, data collection happens with 2 processes.

   1. The 'cache' process connects to the epics PVs and keeps the latest value
      in a "cache" within the database.  This process also periodically checks
      for alerts, sending email when a value goes past a trip-point.

   2. The 'archive' process reads the latest values in the cache and then archives
      them with timestamps into data tables.


To start the cache process, use

    ~> pvarch cache start

and to start the archiving process, use

    ~> pvarch start

Generally speaking, you will want to set these up to run all the time using
cron, and maybe check that they are running correctly.

The documentation will describe more of the `pvarch` commands and the layout of the data.

## Web setup:

To set up the web pages, you will want to run

    ~> pvarch web_init

which will write the Apache configuration file `pvarch.conf`
